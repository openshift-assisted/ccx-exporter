// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -package=mock -destination=./mock/mock_repo.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	entity "github.com/openshift-assisted/ccx-exporter/internal/domain/entity"
	pipeline "github.com/openshift-assisted/ccx-exporter/pkg/pipeline"
)

// MockProcessingErrorWriter is a mock of ProcessingErrorWriter interface.
type MockProcessingErrorWriter struct {
	ctrl     *gomock.Controller
	recorder *MockProcessingErrorWriterMockRecorder
	isgomock struct{}
}

// MockProcessingErrorWriterMockRecorder is the mock recorder for MockProcessingErrorWriter.
type MockProcessingErrorWriterMockRecorder struct {
	mock *MockProcessingErrorWriter
}

// NewMockProcessingErrorWriter creates a new mock instance.
func NewMockProcessingErrorWriter(ctrl *gomock.Controller) *MockProcessingErrorWriter {
	mock := &MockProcessingErrorWriter{ctrl: ctrl}
	mock.recorder = &MockProcessingErrorWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessingErrorWriter) EXPECT() *MockProcessingErrorWriterMockRecorder {
	return m.recorder
}

// WriteProcessingError mocks base method.
func (m *MockProcessingErrorWriter) WriteProcessingError(ctx context.Context, pErr pipeline.ErrProcessingError) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProcessingError", ctx, pErr)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProcessingError indicates an expected call of WriteProcessingError.
func (mr *MockProcessingErrorWriterMockRecorder) WriteProcessingError(ctx, pErr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProcessingError", reflect.TypeOf((*MockProcessingErrorWriter)(nil).WriteProcessingError), ctx, pErr)
}

// MockProcessingError is a mock of ProcessingError interface.
type MockProcessingError struct {
	ctrl     *gomock.Controller
	recorder *MockProcessingErrorMockRecorder
	isgomock struct{}
}

// MockProcessingErrorMockRecorder is the mock recorder for MockProcessingError.
type MockProcessingErrorMockRecorder struct {
	mock *MockProcessingError
}

// NewMockProcessingError creates a new mock instance.
func NewMockProcessingError(ctrl *gomock.Controller) *MockProcessingError {
	mock := &MockProcessingError{ctrl: ctrl}
	mock.recorder = &MockProcessingErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessingError) EXPECT() *MockProcessingErrorMockRecorder {
	return m.recorder
}

// WriteProcessingError mocks base method.
func (m *MockProcessingError) WriteProcessingError(ctx context.Context, pErr pipeline.ErrProcessingError) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProcessingError", ctx, pErr)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProcessingError indicates an expected call of WriteProcessingError.
func (mr *MockProcessingErrorMockRecorder) WriteProcessingError(ctx, pErr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProcessingError", reflect.TypeOf((*MockProcessingError)(nil).WriteProcessingError), ctx, pErr)
}

// MockEventWriter is a mock of EventWriter interface.
type MockEventWriter struct {
	ctrl     *gomock.Controller
	recorder *MockEventWriterMockRecorder
	isgomock struct{}
}

// MockEventWriterMockRecorder is the mock recorder for MockEventWriter.
type MockEventWriterMockRecorder struct {
	mock *MockEventWriter
}

// NewMockEventWriter creates a new mock instance.
func NewMockEventWriter(ctrl *gomock.Controller) *MockEventWriter {
	mock := &MockEventWriter{ctrl: ctrl}
	mock.recorder = &MockEventWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventWriter) EXPECT() *MockEventWriterMockRecorder {
	return m.recorder
}

// WriteEvent mocks base method.
func (m *MockEventWriter) WriteEvent(ctx context.Context, event entity.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteEvent indicates an expected call of WriteEvent.
func (mr *MockEventWriterMockRecorder) WriteEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteEvent", reflect.TypeOf((*MockEventWriter)(nil).WriteEvent), ctx, event)
}

// MockEventReader is a mock of EventReader interface.
type MockEventReader struct {
	ctrl     *gomock.Controller
	recorder *MockEventReaderMockRecorder
	isgomock struct{}
}

// MockEventReaderMockRecorder is the mock recorder for MockEventReader.
type MockEventReaderMockRecorder struct {
	mock *MockEventReader
}

// NewMockEventReader creates a new mock instance.
func NewMockEventReader(ctrl *gomock.Controller) *MockEventReader {
	mock := &MockEventReader{ctrl: ctrl}
	mock.recorder = &MockEventReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventReader) EXPECT() *MockEventReaderMockRecorder {
	return m.recorder
}

// GetEvent mocks base method.
func (m *MockEventReader) GetEvent(ctx context.Context, clusterID string) (entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, clusterID)
	ret0, _ := ret[0].(entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockEventReaderMockRecorder) GetEvent(ctx, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockEventReader)(nil).GetEvent), ctx, clusterID)
}

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
	isgomock struct{}
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// GetEvent mocks base method.
func (m *MockEvent) GetEvent(ctx context.Context, clusterID string) (entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, clusterID)
	ret0, _ := ret[0].(entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockEventMockRecorder) GetEvent(ctx, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockEvent)(nil).GetEvent), ctx, clusterID)
}

// WriteEvent mocks base method.
func (m *MockEvent) WriteEvent(ctx context.Context, event entity.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteEvent indicates an expected call of WriteEvent.
func (mr *MockEventMockRecorder) WriteEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteEvent", reflect.TypeOf((*MockEvent)(nil).WriteEvent), ctx, event)
}

// MockProjectedEventWriter is a mock of ProjectedEventWriter interface.
type MockProjectedEventWriter struct {
	ctrl     *gomock.Controller
	recorder *MockProjectedEventWriterMockRecorder
	isgomock struct{}
}

// MockProjectedEventWriterMockRecorder is the mock recorder for MockProjectedEventWriter.
type MockProjectedEventWriterMockRecorder struct {
	mock *MockProjectedEventWriter
}

// NewMockProjectedEventWriter creates a new mock instance.
func NewMockProjectedEventWriter(ctrl *gomock.Controller) *MockProjectedEventWriter {
	mock := &MockProjectedEventWriter{ctrl: ctrl}
	mock.recorder = &MockProjectedEventWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectedEventWriter) EXPECT() *MockProjectedEventWriterMockRecorder {
	return m.recorder
}

// WriteProjectedEvent mocks base method.
func (m *MockProjectedEventWriter) WriteProjectedEvent(ctx context.Context, event entity.ProjectedEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProjectedEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProjectedEvent indicates an expected call of WriteProjectedEvent.
func (mr *MockProjectedEventWriterMockRecorder) WriteProjectedEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProjectedEvent", reflect.TypeOf((*MockProjectedEventWriter)(nil).WriteProjectedEvent), ctx, event)
}

// MockProjectedEvent is a mock of ProjectedEvent interface.
type MockProjectedEvent struct {
	ctrl     *gomock.Controller
	recorder *MockProjectedEventMockRecorder
	isgomock struct{}
}

// MockProjectedEventMockRecorder is the mock recorder for MockProjectedEvent.
type MockProjectedEventMockRecorder struct {
	mock *MockProjectedEvent
}

// NewMockProjectedEvent creates a new mock instance.
func NewMockProjectedEvent(ctrl *gomock.Controller) *MockProjectedEvent {
	mock := &MockProjectedEvent{ctrl: ctrl}
	mock.recorder = &MockProjectedEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectedEvent) EXPECT() *MockProjectedEventMockRecorder {
	return m.recorder
}

// WriteProjectedEvent mocks base method.
func (m *MockProjectedEvent) WriteProjectedEvent(ctx context.Context, event entity.ProjectedEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProjectedEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProjectedEvent indicates an expected call of WriteProjectedEvent.
func (mr *MockProjectedEventMockRecorder) WriteProjectedEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProjectedEvent", reflect.TypeOf((*MockProjectedEvent)(nil).WriteProjectedEvent), ctx, event)
}
