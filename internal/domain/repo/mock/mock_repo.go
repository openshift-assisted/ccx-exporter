// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -package=mock -destination=./mock/mock_repo.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	entity "github.com/openshift-assisted/ccx-exporter/internal/domain/entity"
	pipeline "github.com/openshift-assisted/ccx-exporter/pkg/pipeline"
)

// MockProcessingErrorWriter is a mock of ProcessingErrorWriter interface.
type MockProcessingErrorWriter struct {
	ctrl     *gomock.Controller
	recorder *MockProcessingErrorWriterMockRecorder
	isgomock struct{}
}

// MockProcessingErrorWriterMockRecorder is the mock recorder for MockProcessingErrorWriter.
type MockProcessingErrorWriterMockRecorder struct {
	mock *MockProcessingErrorWriter
}

// NewMockProcessingErrorWriter creates a new mock instance.
func NewMockProcessingErrorWriter(ctrl *gomock.Controller) *MockProcessingErrorWriter {
	mock := &MockProcessingErrorWriter{ctrl: ctrl}
	mock.recorder = &MockProcessingErrorWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessingErrorWriter) EXPECT() *MockProcessingErrorWriterMockRecorder {
	return m.recorder
}

// WriteProcessingError mocks base method.
func (m *MockProcessingErrorWriter) WriteProcessingError(ctx context.Context, pErr pipeline.ErrProcessingError) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProcessingError", ctx, pErr)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProcessingError indicates an expected call of WriteProcessingError.
func (mr *MockProcessingErrorWriterMockRecorder) WriteProcessingError(ctx, pErr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProcessingError", reflect.TypeOf((*MockProcessingErrorWriter)(nil).WriteProcessingError), ctx, pErr)
}

// MockProcessingError is a mock of ProcessingError interface.
type MockProcessingError struct {
	ctrl     *gomock.Controller
	recorder *MockProcessingErrorMockRecorder
	isgomock struct{}
}

// MockProcessingErrorMockRecorder is the mock recorder for MockProcessingError.
type MockProcessingErrorMockRecorder struct {
	mock *MockProcessingError
}

// NewMockProcessingError creates a new mock instance.
func NewMockProcessingError(ctrl *gomock.Controller) *MockProcessingError {
	mock := &MockProcessingError{ctrl: ctrl}
	mock.recorder = &MockProcessingErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessingError) EXPECT() *MockProcessingErrorMockRecorder {
	return m.recorder
}

// WriteProcessingError mocks base method.
func (m *MockProcessingError) WriteProcessingError(ctx context.Context, pErr pipeline.ErrProcessingError) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProcessingError", ctx, pErr)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProcessingError indicates an expected call of WriteProcessingError.
func (mr *MockProcessingErrorMockRecorder) WriteProcessingError(ctx, pErr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProcessingError", reflect.TypeOf((*MockProcessingError)(nil).WriteProcessingError), ctx, pErr)
}

// MockHostStateWriter is a mock of HostStateWriter interface.
type MockHostStateWriter struct {
	ctrl     *gomock.Controller
	recorder *MockHostStateWriterMockRecorder
	isgomock struct{}
}

// MockHostStateWriterMockRecorder is the mock recorder for MockHostStateWriter.
type MockHostStateWriterMockRecorder struct {
	mock *MockHostStateWriter
}

// NewMockHostStateWriter creates a new mock instance.
func NewMockHostStateWriter(ctrl *gomock.Controller) *MockHostStateWriter {
	mock := &MockHostStateWriter{ctrl: ctrl}
	mock.recorder = &MockHostStateWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostStateWriter) EXPECT() *MockHostStateWriterMockRecorder {
	return m.recorder
}

// WriteHostState mocks base method.
func (m *MockHostStateWriter) WriteHostState(ctx context.Context, state entity.HostState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteHostState", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteHostState indicates an expected call of WriteHostState.
func (mr *MockHostStateWriterMockRecorder) WriteHostState(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHostState", reflect.TypeOf((*MockHostStateWriter)(nil).WriteHostState), ctx, state)
}

// MockHostStateReader is a mock of HostStateReader interface.
type MockHostStateReader struct {
	ctrl     *gomock.Controller
	recorder *MockHostStateReaderMockRecorder
	isgomock struct{}
}

// MockHostStateReaderMockRecorder is the mock recorder for MockHostStateReader.
type MockHostStateReaderMockRecorder struct {
	mock *MockHostStateReader
}

// NewMockHostStateReader creates a new mock instance.
func NewMockHostStateReader(ctrl *gomock.Controller) *MockHostStateReader {
	mock := &MockHostStateReader{ctrl: ctrl}
	mock.recorder = &MockHostStateReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostStateReader) EXPECT() *MockHostStateReaderMockRecorder {
	return m.recorder
}

// GetHostStates mocks base method.
func (m *MockHostStateReader) GetHostStates(ctx context.Context, clusterID string) ([]entity.HostState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostStates", ctx, clusterID)
	ret0, _ := ret[0].([]entity.HostState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostStates indicates an expected call of GetHostStates.
func (mr *MockHostStateReaderMockRecorder) GetHostStates(ctx, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostStates", reflect.TypeOf((*MockHostStateReader)(nil).GetHostStates), ctx, clusterID)
}

// MockHostState is a mock of HostState interface.
type MockHostState struct {
	ctrl     *gomock.Controller
	recorder *MockHostStateMockRecorder
	isgomock struct{}
}

// MockHostStateMockRecorder is the mock recorder for MockHostState.
type MockHostStateMockRecorder struct {
	mock *MockHostState
}

// NewMockHostState creates a new mock instance.
func NewMockHostState(ctrl *gomock.Controller) *MockHostState {
	mock := &MockHostState{ctrl: ctrl}
	mock.recorder = &MockHostStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostState) EXPECT() *MockHostStateMockRecorder {
	return m.recorder
}

// GetHostStates mocks base method.
func (m *MockHostState) GetHostStates(ctx context.Context, clusterID string) ([]entity.HostState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostStates", ctx, clusterID)
	ret0, _ := ret[0].([]entity.HostState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostStates indicates an expected call of GetHostStates.
func (mr *MockHostStateMockRecorder) GetHostStates(ctx, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostStates", reflect.TypeOf((*MockHostState)(nil).GetHostStates), ctx, clusterID)
}

// WriteHostState mocks base method.
func (m *MockHostState) WriteHostState(ctx context.Context, state entity.HostState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteHostState", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteHostState indicates an expected call of WriteHostState.
func (mr *MockHostStateMockRecorder) WriteHostState(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHostState", reflect.TypeOf((*MockHostState)(nil).WriteHostState), ctx, state)
}

// MockProjectedClusterEventWriter is a mock of ProjectedClusterEventWriter interface.
type MockProjectedClusterEventWriter struct {
	ctrl     *gomock.Controller
	recorder *MockProjectedClusterEventWriterMockRecorder
	isgomock struct{}
}

// MockProjectedClusterEventWriterMockRecorder is the mock recorder for MockProjectedClusterEventWriter.
type MockProjectedClusterEventWriterMockRecorder struct {
	mock *MockProjectedClusterEventWriter
}

// NewMockProjectedClusterEventWriter creates a new mock instance.
func NewMockProjectedClusterEventWriter(ctrl *gomock.Controller) *MockProjectedClusterEventWriter {
	mock := &MockProjectedClusterEventWriter{ctrl: ctrl}
	mock.recorder = &MockProjectedClusterEventWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectedClusterEventWriter) EXPECT() *MockProjectedClusterEventWriterMockRecorder {
	return m.recorder
}

// WriteProjectedClusterEvent mocks base method.
func (m *MockProjectedClusterEventWriter) WriteProjectedClusterEvent(ctx context.Context, event entity.ProjectedClusterEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProjectedClusterEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProjectedClusterEvent indicates an expected call of WriteProjectedClusterEvent.
func (mr *MockProjectedClusterEventWriterMockRecorder) WriteProjectedClusterEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProjectedClusterEvent", reflect.TypeOf((*MockProjectedClusterEventWriter)(nil).WriteProjectedClusterEvent), ctx, event)
}

// MockProjectedClusterStateWriter is a mock of ProjectedClusterStateWriter interface.
type MockProjectedClusterStateWriter struct {
	ctrl     *gomock.Controller
	recorder *MockProjectedClusterStateWriterMockRecorder
	isgomock struct{}
}

// MockProjectedClusterStateWriterMockRecorder is the mock recorder for MockProjectedClusterStateWriter.
type MockProjectedClusterStateWriterMockRecorder struct {
	mock *MockProjectedClusterStateWriter
}

// NewMockProjectedClusterStateWriter creates a new mock instance.
func NewMockProjectedClusterStateWriter(ctrl *gomock.Controller) *MockProjectedClusterStateWriter {
	mock := &MockProjectedClusterStateWriter{ctrl: ctrl}
	mock.recorder = &MockProjectedClusterStateWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectedClusterStateWriter) EXPECT() *MockProjectedClusterStateWriterMockRecorder {
	return m.recorder
}

// WriteProjectedClusterState mocks base method.
func (m *MockProjectedClusterStateWriter) WriteProjectedClusterState(ctx context.Context, state entity.ProjectedClusterState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProjectedClusterState", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProjectedClusterState indicates an expected call of WriteProjectedClusterState.
func (mr *MockProjectedClusterStateWriterMockRecorder) WriteProjectedClusterState(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProjectedClusterState", reflect.TypeOf((*MockProjectedClusterStateWriter)(nil).WriteProjectedClusterState), ctx, state)
}

// MockProjectedInfraEnvWriter is a mock of ProjectedInfraEnvWriter interface.
type MockProjectedInfraEnvWriter struct {
	ctrl     *gomock.Controller
	recorder *MockProjectedInfraEnvWriterMockRecorder
	isgomock struct{}
}

// MockProjectedInfraEnvWriterMockRecorder is the mock recorder for MockProjectedInfraEnvWriter.
type MockProjectedInfraEnvWriterMockRecorder struct {
	mock *MockProjectedInfraEnvWriter
}

// NewMockProjectedInfraEnvWriter creates a new mock instance.
func NewMockProjectedInfraEnvWriter(ctrl *gomock.Controller) *MockProjectedInfraEnvWriter {
	mock := &MockProjectedInfraEnvWriter{ctrl: ctrl}
	mock.recorder = &MockProjectedInfraEnvWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectedInfraEnvWriter) EXPECT() *MockProjectedInfraEnvWriterMockRecorder {
	return m.recorder
}

// WriteProjectedInfraEnv mocks base method.
func (m *MockProjectedInfraEnvWriter) WriteProjectedInfraEnv(ctx context.Context, infraEnv entity.ProjectedInfraEnv) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProjectedInfraEnv", ctx, infraEnv)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProjectedInfraEnv indicates an expected call of WriteProjectedInfraEnv.
func (mr *MockProjectedInfraEnvWriterMockRecorder) WriteProjectedInfraEnv(ctx, infraEnv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProjectedInfraEnv", reflect.TypeOf((*MockProjectedInfraEnvWriter)(nil).WriteProjectedInfraEnv), ctx, infraEnv)
}

// MockProjectionWriter is a mock of ProjectionWriter interface.
type MockProjectionWriter struct {
	ctrl     *gomock.Controller
	recorder *MockProjectionWriterMockRecorder
	isgomock struct{}
}

// MockProjectionWriterMockRecorder is the mock recorder for MockProjectionWriter.
type MockProjectionWriterMockRecorder struct {
	mock *MockProjectionWriter
}

// NewMockProjectionWriter creates a new mock instance.
func NewMockProjectionWriter(ctrl *gomock.Controller) *MockProjectionWriter {
	mock := &MockProjectionWriter{ctrl: ctrl}
	mock.recorder = &MockProjectionWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectionWriter) EXPECT() *MockProjectionWriterMockRecorder {
	return m.recorder
}

// WriteProjectedClusterEvent mocks base method.
func (m *MockProjectionWriter) WriteProjectedClusterEvent(ctx context.Context, event entity.ProjectedClusterEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProjectedClusterEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProjectedClusterEvent indicates an expected call of WriteProjectedClusterEvent.
func (mr *MockProjectionWriterMockRecorder) WriteProjectedClusterEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProjectedClusterEvent", reflect.TypeOf((*MockProjectionWriter)(nil).WriteProjectedClusterEvent), ctx, event)
}

// WriteProjectedClusterState mocks base method.
func (m *MockProjectionWriter) WriteProjectedClusterState(ctx context.Context, state entity.ProjectedClusterState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProjectedClusterState", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProjectedClusterState indicates an expected call of WriteProjectedClusterState.
func (mr *MockProjectionWriterMockRecorder) WriteProjectedClusterState(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProjectedClusterState", reflect.TypeOf((*MockProjectionWriter)(nil).WriteProjectedClusterState), ctx, state)
}

// WriteProjectedInfraEnv mocks base method.
func (m *MockProjectionWriter) WriteProjectedInfraEnv(ctx context.Context, infraEnv entity.ProjectedInfraEnv) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProjectedInfraEnv", ctx, infraEnv)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProjectedInfraEnv indicates an expected call of WriteProjectedInfraEnv.
func (mr *MockProjectionWriterMockRecorder) WriteProjectedInfraEnv(ctx, infraEnv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProjectedInfraEnv", reflect.TypeOf((*MockProjectionWriter)(nil).WriteProjectedInfraEnv), ctx, infraEnv)
}
