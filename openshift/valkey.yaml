---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: valkey-ccx-exporter
parameters:
- name: VALKEY_NAME
  value: valkey-ccx-exporter
- name: NAMESPACE
  value: ccx-exporter
- name: VALKEY_IMAGE_NAME
  value: quay.io/sclorg/valkey-7-c10s
- name: VALKEY_IMAGE_TAG
  value: bf91acf0827dc5db216164aafe3d34beb245dcec
- name: VALKEY_STORAGE
  value: 5Gi
- name: VALKEY_CREDENTIALS_SECRETNAME
  value: valkey-creds

objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${VALKEY_NAME}-configuration
    labels:
      app.kubernetes.io/name: ${VALKEY_NAME}
      app.kubernetes.io/instance: ccx-exporter
  data:
    valkey.conf: |-
      # User-supplied common configuration:
      # Enable AOF
      appendonly yes
      # Disable RDB persistence, AOF persistence already enabled.
      save ""
      # End of common configuration
    master.conf: |-
      dir /data
      # User-supplied master configuration:
      rename-command FLUSHDB ""
      rename-command FLUSHALL ""
      # End of master configuration
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${VALKEY_NAME}-health
    labels:
      app.kubernetes.io/name: ${VALKEY_NAME}
      app.kubernetes.io/instance: ccx-exporter
  data:
    ping_readiness_local.sh: |-
      #!/bin/bash

      [[ -f $VALKEY_PASSWORD_FILE ]] && export VALKEY_PASSWORD="$(< "${VALKEY_PASSWORD_FILE}")"
      [[ -n "$VALKEY_PASSWORD" ]] && export REDISCLI_AUTH="$VALKEY_PASSWORD"
      response=$(
        timeout -s 3 $1 \
        valkey-cli \
          -h localhost \
          -p 6379 \
          ping
      )
      if [ "$?" -eq "124" ]; then
        echo "Timed out"
        exit 1
      fi
      if [ "$response" != "PONG" ]; then
        echo "$response"
        exit 1
      fi
    ping_liveness_local.sh: |-
      #!/bin/bash

      [[ -f $VALKEY_PASSWORD_FILE ]] && export VALKEY_PASSWORD="$(< "${VALKEY_PASSWORD_FILE}")"
      [[ -n "$VALKEY_PASSWORD" ]] && export REDISCLI_AUTH="$VALKEY_PASSWORD"
      response=$(
        timeout -s 3 $1 \
        valkey-cli \
          -h localhost \
          -p 6379 \
          ping
      )
      if [ "$?" -eq "124" ]; then
        echo "Timed out"
        exit 1
      fi
      responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
      if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
        echo "$response"
        exit 1
      fi
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${VALKEY_NAME}-scripts
    labels:
      app.kubernetes.io/name: ${VALKEY_NAME}
      app.kubernetes.io/instance: ccx-exporter
  data:
    start-master.sh: |
      #!/bin/bash

      ARGS=("--port" "6379")
      ARGS+=("--requirepass" "${VALKEY_PASSWORD}")
      ARGS+=("--masterauth" "${VALKEY_PASSWORD}")
      ARGS+=("--include" "/opt/valkey/mounted-etc/valkey.conf")
      ARGS+=("--include" "/opt/valkey/mounted-etc/master.conf")

      exec valkey-server "${ARGS[@]}"
- apiVersion: v1
  kind: Service
  metadata:
    name: ${VALKEY_NAME}-headless
    labels:
      app.kubernetes.io/name: ${VALKEY_NAME}
      app.kubernetes.io/instance: ccx-exporter
  spec:
    type: ClusterIP
    clusterIP: None
    ports:
      - name: tcp-valkey
        port: 6379
        targetPort: valkey
    selector:
      app.kubernetes.io/name: ${VALKEY_NAME}
      app.kubernetes.io/instance: ccx-exporter
- apiVersion: v1
  kind: Service
  metadata:
    name: ${VALKEY_NAME}
    labels:
      app.kubernetes.io/name: ${VALKEY_NAME}
      app.kubernetes.io/instance: ccx-exporter
  spec:
    type: ClusterIP
    internalTrafficPolicy: Cluster
    sessionAffinity: None
    ports:
      - name: tcp-valkey
        port: 6379
        targetPort: valkey
        nodePort: null
    selector:
      app.kubernetes.io/name: ${VALKEY_NAME}
      app.kubernetes.io/instance: ccx-exporter
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    name: ${VALKEY_NAME}
    labels:
      app.kubernetes.io/name: ${VALKEY_NAME}
      app.kubernetes.io/instance: ccx-exporter
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: ${VALKEY_NAME}
        app.kubernetes.io/instance: ccx-exporter
    serviceName: ${VALKEY_NAME}-headless
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
    template:
      metadata:
        labels:
          app.kubernetes.io/name: ${VALKEY_NAME}
          app.kubernetes.io/instance: ccx-exporter
      spec:
        affinity:
          podAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - podAffinityTerm:
                  labelSelector:
                    matchLabels:
                      app.kubernetes.io/name: ccx-exporter
                  namespaces:
                    - "${NAMESPACE}"
                  topologyKey: kubernetes.io/hostname
                weight: 1
        terminationGracePeriodSeconds: 30
        containers:
          - name: valkey
            image: ${VALKEY_IMAGE_NAME}:${VALKEY_IMAGE_TAG}
            imagePullPolicy: "IfNotPresent"
            securityContext:
              runAsNonRoot: true
            command:
              - /bin/bash
            args:
              - -c
              - /opt/valkey/scripts/start-scripts/start-master.sh
            env:
              - name: VALKEY_REPLICATION_MODE
                value: master
              - name: ALLOW_EMPTY_PASSWORD
                value: "no"
              - name: VALKEY_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${VALKEY_CREDENTIALS_SECRETNAME}
                    key: password
              - name: VALKEY_TLS_ENABLED
                value: "no"
              - name: VALKEY_PORT
                value: "6379"
            ports:
              - name: valkey
                containerPort: 6379
            resources:
              limits: {}
              requests: {}
            livenessProbe:
              initialDelaySeconds: 20
              periodSeconds: 5
              # One second longer than command timeout should prevent generation of zombie processes.
              timeoutSeconds: 6
              successThreshold: 1
              failureThreshold: 5
              exec:
                command:
                  - sh
                  - -c
                  - /health/ping_liveness_local.sh 5
            readinessProbe:
              initialDelaySeconds: 5
              periodSeconds: 5
              timeoutSeconds: 2
              successThreshold: 1
              failureThreshold: 5
              exec:
                command:
                  - sh
                  - -c
                  - /health/ping_readiness_local.sh 1
            volumeMounts:
              - name: start-scripts
                mountPath: /opt/valkey/scripts/start-scripts
              - name: ${VALKEY_NAME}
                mountPath: /data
              - name: config
                mountPath: /opt/valkey/mounted-etc
              - name: health
                mountPath: /health
        volumes:
          - name: start-scripts
            configMap:
              name: ${VALKEY_NAME}-scripts
              defaultMode: 0755
          - name: config
            configMap:
              name: ${VALKEY_NAME}-configuration
          - name: health
            configMap:
              name: ${VALKEY_NAME}-health
              defaultMode: 0755
    volumeClaimTemplates:
      - metadata:
          name: ${VALKEY_NAME}
          labels:
            app.kubernetes.io/name: ${VALKEY_NAME}
            app.kubernetes.io/instance: ccx-exporter
        spec:
          accessModes:
            - "ReadWriteOnce"
          resources:
            requests:
              storage: "${VALKEY_STORAGE}"
