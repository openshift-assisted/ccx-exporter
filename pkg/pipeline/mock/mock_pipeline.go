// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -package=mock -destination=./mock/mock_pipeline.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProcessing is a mock of Processing interface.
type MockProcessing[Payload any] struct {
	ctrl     *gomock.Controller
	recorder *MockProcessingMockRecorder[Payload]
	isgomock struct{}
}

// MockProcessingMockRecorder is the mock recorder for MockProcessing.
type MockProcessingMockRecorder[Payload any] struct {
	mock *MockProcessing[Payload]
}

// NewMockProcessing creates a new mock instance.
func NewMockProcessing[Payload any](ctrl *gomock.Controller) *MockProcessing[Payload] {
	mock := &MockProcessing[Payload]{ctrl: ctrl}
	mock.recorder = &MockProcessingMockRecorder[Payload]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessing[Payload]) EXPECT() *MockProcessingMockRecorder[Payload] {
	return m.recorder
}

// Process mocks base method.
func (m *MockProcessing[Payload]) Process(arg0 context.Context, arg1 Payload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockProcessingMockRecorder[Payload]) Process(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockProcessing[Payload])(nil).Process), arg0, arg1)
}
